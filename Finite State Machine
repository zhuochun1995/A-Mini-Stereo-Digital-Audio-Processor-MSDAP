----------------------------------------------------------
-- File Name: Finite State Machine Ver 1.3
-- Usage: Tested with FSM TB
-- Author: Zhuochun Li
-- Submission Date: 25 Oct 2018
-----------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity FSM is
	port(
		sclk				:in std_logic; 
		dclk 				:in std_logic;
		start				:in std_logic;
		reset_n				:in std_logic;
		frame				:in std_logic;
		allzero		                :in std_logic;
		load_rj_done		        :in std_logic;
		load_coeff_done	        :in std_logic;
		dataout_done		        :in std_logic;

		load_rj				:out std_logic;
		load_coeff			:out std_logic;
		load_data		        :out std_logic;
		clr_rj 				:out std_logic;
		clr_coeff			:out std_logic;
		clr_data			:out std_logic;
		inready				:out std_logic;
		outready 			:out std_logic
		);
end FSM;

architecture Behavioral of FSM is
	type state_type is
(init, wait_rj,reading_rj, wait_coeff,reading_coeff, wait_data,working,clearing, sleeping );
	signal current_state, next_state:  state_type;
	signal count_done:std_logic;	
	signal zero_counter: std_logic_vector(9 downto 0);
	
	begin
	comb: process
(sclk, start, reset_n, frame, allzero, load_rj_done, load_coeff_done,dataout_done)
	begin
	  case current_state is

	  when init =>
		inready		<='0';
		outready	<='0';
		load_rj		<='0';
		load_coeff	<='0';
		load_data	<='0';
		clr_rj		<='1';
		clr_coeff	<='1';
		clr_data	<='1';
		next_state	<=wait_rj;

	  when wait_rj =>
		inready		<='1';
		outready	<='0';
		load_rj		<='0';
		load_coeff	<='0';
		load_data	<='0';
		clr_rj		<='0';
		clr_coeff	<='0';
		clr_data	<='0';
		
		if start = '1' then
		   next_state <=init;
		elsif frame = '1' then
		   next_state <= reading_rj;
		else
		   next_state<= current_state;
		end if;

	  when reading_rj =>
		inready		<='1';
		outready	<='0';
		load_rj		<='1';
		load_coeff	<='0';
		load_data	<='0';
		clr_rj		<='0';
		clr_coeff	<='0';
		clr_data	<='0';
		
		if start = '1' then
		   next_state <=init;
		elsif load_rj_done = '1' then
		   next_state <= wait_coeff;
		else
		   next_state<= current_state;
		end if;
		   
	  when wait_coeff =>
		inready		<='1';
		outready	<='0';
		load_rj		<='0';
		load_coeff	<='0';
		load_data	<='0';
		clr_rj		<='0';
		clr_coeff	<='0';
		clr_data	<='0';
		
		if start = '1' then
		   next_state <=init;
		elsif frame = '1' then
		   next_state <= reading_coeff;
		else
		   next_state<= current_state;
		end if;

	  when reading_coeff =>
		inready		<='1';
		outready	<='0';
		load_rj		<='0';
		load_coeff	<='1';
		load_data	<='0';
		clr_rj		<='0';
		clr_coeff	<='0';
		clr_data	<='0';
		
		if start = '1' then
		   next_state <=init;
		elsif load_coeff_done = '1' then
		   next_state <= wait_data;
		else
		   next_state<= current_state;
		end if;

	  when wait_data =>
		inready		<='1';
		outready	<='0';
		load_rj		<='0';
		load_coeff	<='0';
		load_data	<='0';
		clr_rj		<='0';
		clr_coeff	<='0';
		clr_data	<='0';
		
		if start = '1' then
		   next_state <=init;
		elsif reset_n = '1' then
		   next_state <= clearing;
		elsif frame <= '1' then
		   next_state <= working;
		else
		   next_state <= current_state;
		end if;

	  when working =>
		inready		<='1';
		load_rj		<='0';
		load_coeff	<='0';
		load_data	<='1';
		clr_rj		<='0';
		clr_coeff	<='0';
		clr_data	<='0';
		
		if dataout_done = '1' then
		   outready <='1';
		else
		   outready <= '0';
		end if;

		if start = '1' then
		   next_state <= init;
		elsif reset_n = '1' then
		   next_state <= clearing;
		elsif count_done = '1' then
		   next_state <= sleeping;
		else
		   next_state <= current_state;
		end if;

	  when clearing =>
		inready		<='0';
		outready	<='0';
		load_rj		<='0';
		load_coeff	<='0';
		load_data	<='0';
		clr_rj		<='0';
		clr_coeff	<='0';
		clr_data	<='1';
		
		if start = '1' then
		   next_state <=init;
		elsif reset_n = '1' then
		   next_state <= wait_data;
		else
		   next_state <= current_state;
		end if;

	  when  sleeping =>
		inready		<='1';
		outready	<='0';
		load_rj		<='0';
		load_coeff	<='0';
		load_data	<='1';
		clr_rj		<='0';
		clr_coeff	<='0';
		clr_data	<='0';
		
		if start = '1' then
		   next_state <=init;
		elsif reset_n = '1' then
		   next_state <= clearing;
		elsif allzero <= '0' then
		   next_state <= working;
		else
		   next_state <= current_state;
		end if;

	end case;
	end process;

	seq : process(sclk, start)
	      begin
 	      if start = '1' then
		current_state <= init;
	      elsif sclk 'event and sclk = '0' then
		current_state <= next_state;
	      end if;
	      end process;

	count_800 : process(dclk, start)
		    begin 
			if start = '1' then
			   count_done <= '0';
			   zero_counter <= "0000000000";
			elsif dclk 'event and dclk = '1' and frame = '1' then
			   if allzero = '1' then
			   	if zero_counter = "0000000100" then
				count_done <= '1';
				else
				count_done <='0';
				zero_counter <= zero_counter + '1';
			    end if;
				else
				count_done <='0';
				zero_counter <= "0000000000";				
			end if;
			end if;
			end process;

end Behavioral;
